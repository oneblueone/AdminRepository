<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--注册中央调度器-->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:conf/dispatcherServlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <!--注册Spring监听器-->
    <!--指定要加载配置文件的位置-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:conf/applicationContext.xml</param-value>
    </context-param>
   <!-- 如果在web.xml中不写任何参数配置信息，默认的路径是/WEB-INF/applicationContext.xml
   在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml；
    如果是要自定义文件名可以在web.xml里加入contextConfigLocation这个context参数：
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:conf/applicationContext.xml
        </param-value>
    </context-param>
    在<param-value> </param-value>里指定相应的xml文件名，
  -->
    <!--spring监听器，ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。
API说明。
第一段说明ContextLoader可以由 ContextLoaderListener和ContextLoaderServlet生成。如果查看ContextLoaderServlet的API，
可以看到它也关联了ContextLoader这个类而且它实现了HttpServlet这个接口。
第二段，ContextLoader创建的是 XmlWebApplicationContext这样一个类
它实现的接口是WebApplicationContext->ConfigurableWebApplicationContext->ApplicationContext->BeanFactory
这样一来spring中的所有bean都由这个类来创建
第三段,讲如何部署applicationContext的xml文件。
    -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--字符集过滤器-->
    <!--请求编码问题
       //对服务器响应进行重新编码
       resp.setCharacterEncoding("UTF-8");
      //对请求进行重新编码
       req.setCharacterEncoding("UTF-8");
       -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param> <init-param>
        <param-name>forceResponseEncoding</param-name>
        <param-value>true</param-value>
    </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>